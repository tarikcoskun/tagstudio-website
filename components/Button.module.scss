@use "sass:color";
@use "@/styles/colors";

$variants: "solid", "soft", "ghost";
$colors: (
  "surface": (
    solid-base: colors.$gray-200,
    solid-text: colors.$gray-800,
    solid-hover: colors.$gray-50,
    soft-base: colors.$gray-300,
    soft-text: colors.$gray-200,
  ),
);

.button {
  display: flex;
  align-items: center;
  border-radius: var(--rounded-md);
  box-shadow: 0 0 16px 0 rgb(0 0 0 / 0.05);
  cursor: pointer;
  font-size: var(--font-size-sm);
  font-weight: 500;
  gap: 0.5rem;
  transition: background-color 150ms;

  &:hover { text-decoration: none; }
  &.padding-base { padding: 10px 14px; }
  &.padding-square { padding: 10px; }
  &[disabled] {
    opacity: 0.375;
    pointer-events: none;
  }

  @mixin generate-color-variant($colors, $variant, $color) {
    @if $variant == "solid" {
      background-color: map-get($colors, $color, "solid-base");
      color: map-get($colors, $color, "solid-text");

      &:hover { background-color: map-get($colors, $color, "solid-hover"); }
    } @else if $variant == "soft" {
      backdrop-filter: blur(16px);
      background-color: if(map-has-key($colors, $color, "soft-base"), color.scale(map-get($colors, $color, "soft-base"), $alpha: -85%), red);
      color: map-get($colors, $color, "soft-text");

      &:hover { background-color: if(map-has-key($colors, $color, "soft-base"), color.scale(map-get($colors, $color, "soft-base"), $alpha: -75%), red); }
    } @else if $variant == "ghost" {
      background-color: transparent;
      color: map-get($colors, $color, "soft-text");

      &:hover { background-color: if(map-has-key($colors, $color, "soft-base"), color.scale(map-get($colors, $color, "soft-base"), $alpha: -85%), red); }
    } @else {
      @error "Unsupported variant: #{$variant}";
    }
  }

  @each $variant in $variants {
    @each $color in map-keys($colors) {
      &.#{$variant}-#{$color} {
        @include generate-color-variant($colors, $variant, $color);
      }
    }
  }

  .trailing {
    display: flex;
    margin-left: auto;
  }
}

.button-group {
  display: flex;

  > :first-child {
    flex-grow: 1;
    border-bottom-right-radius: 0;
    border-top-right-radius: 0;
  }

  > :last-child {
    border-left: 1px solid rgb(0 0 0 / 0.075);
    border-bottom-left-radius: 0;
    border-top-left-radius: 0;
  }

  &[aria-disabled="true"] {
    opacity: 0.5;
    pointer-events: none;
  }
}
